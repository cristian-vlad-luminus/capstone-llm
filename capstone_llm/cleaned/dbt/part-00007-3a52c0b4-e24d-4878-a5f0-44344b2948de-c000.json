{"title":"How do I run DBT models from a Python script or program?","question_body":"<p>I have a DBT project, and a python script will be grabbing data from the postgresql to produce output.</p>\n<p>However, part of the python script will need to make the DBT run. I haven't found the library that will let me cause a DBT run from an external script, but I'm pretty sure it exists. How do I do this?</p>\n<p>ETA: The correct answer may be to download the DBT CLI and then use python system calls to use that.... I was hoping for a library, but I'll take what I can get.</p>\n","answer_body":"<h2>Update: v1.5 has arrived!</h2>\n<p>With v1.5 of dbt, we get a stable and officially supported Python API for invoking dbt operations; this API has functional parity with the CLI.</p>\n<p>From the <a href=\"https://docs.getdbt.com/reference/programmatic-invocations\" rel=\"noreferrer\">docs</a>:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from dbt.cli.main import dbtRunner, dbtRunnerResult\n\n# initialize\ndbt = dbtRunner()\n\n# create CLI args as a list of strings\ncli_args = [&quot;run&quot;, &quot;--select&quot;, &quot;tag:my_tag&quot;]\n\n# run the command\nres: dbtRunnerResult = dbt.invoke(cli_args)\n\n# inspect the results\nfor r in res.result:\n    print(f&quot;{r.node.name}: {r.status}&quot;)\n</code></pre>\n<p>There are some caveats about the stability of artifacts returned by <code>dbt.invoke</code>; read the docs for more details.</p>\n<h2>Original Answer</h2>\n<p>(As of Jan 2023) There is not a public Python API for dbt, yet. It is expected in v1.5, which should be out in a couple months.</p>\n<p>Right now, your safest option is to use the CLI. If you don't want to use <code>subprocess</code>, the CLI uses <a href=\"https://click.palletsprojects.com/en/8.1.x/\" rel=\"noreferrer\">Click</a> now, and Click provides a <a href=\"https://click.palletsprojects.com/en/8.1.x/api/#click.testing.CliRunner\" rel=\"noreferrer\">runner</a> that you can use to invoke Click commands. It's usually used for testing, but I think it would work for your use case, too. The CLI command is <a href=\"https://github.com/dbt-labs/dbt-core/blob/7077c475511b4f251245b6e246b9a23bed18eed0/core/dbt/cli/main.py#L292\" rel=\"noreferrer\">here</a>. That would look something like:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from click.testing import CliRunner\nfrom dbt.cli.main import run\n\ndbt_runner = CliRunner()\ndbt_runner.invoke(run, args=&quot;-s my_model&quot;)\n</code></pre>\n<p>You could also invoke dbt the way they do in the test suite, using <a href=\"https://github.com/dbt-labs/dbt-core/blob/1e35339389ded85631128b66f57c62ca60649c88/core/dbt/tests/util.py#L63\" rel=\"noreferrer\"><code>run_dbt</code></a>.</p>\n"}
