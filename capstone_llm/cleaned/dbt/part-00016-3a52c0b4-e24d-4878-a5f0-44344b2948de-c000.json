{"title":"DBT - environment variables and running dbt","question_body":"<p>I am relatively new to DBT and I have been reading about <code>env_var</code> and I want to use this in a couple of situations and I am having difficultly and looking for some support.</p>\n<p>firstly I am trying to use it in my profiles.yml file to replace the user and password so that this can be set when it is invoked. When trying to test this locally (before implementing this on our AWS side) I am failing to find the right syntax and not finding anything useful online.\nI have tried variations of:</p>\n<pre><code>dbt run --vars '{DBT_USER: my_username, DBT_PASSWORD=my_password}'\n</code></pre>\n<p>but it is not recognizing and giving nothing useful error wise. When running dbt run by itself it does ask for <code>DBT_USER</code> so it is expecting it, but doesn't detail how</p>\n<p>I would also like to use it in my <code>dbt_project.yml</code> for the schema but I assume that this will be similar to the above, just a third variable at the end. Is that the case?</p>\n<p>Thanks</p>\n","answer_body":"<p><code>var</code> and <code>env_var</code> are two separate features of dbt.</p>\n<p>You can use <code>var</code> to access a global variable you define in your <code>dbt_project.yml</code> file. The <code>--vars</code> command-line option lets you override the values of these vars at runtime. See the <a href=\"https://docs.getdbt.com/reference/dbt-jinja-functions/var\" rel=\"nofollow noreferrer\">docs for <code>var</code></a>.</p>\n<p>You should use <code>env_var</code> to access <a href=\"https://www.techrepublic.com/article/linux-101-what-are-environment-variables/\" rel=\"nofollow noreferrer\">environment variables</a> that you set outside of dbt for your system, user, or shell session. Typically you would use environment variables to store secrets like your profile's connection credentials.</p>\n<p>To access environment variables in your <code>profiles.yml</code> file, you replace the values for username and password with a call to the <code>env_var</code> macro, as they do in the <a href=\"https://docs.getdbt.com/reference/dbt-jinja-functions/env_var\" rel=\"nofollow noreferrer\">docs for <code>env_var</code></a>:</p>\n<pre class=\"lang-yaml prettyprint-override\"><code>profile:\n  target: prod\n  outputs:\n    prod:\n      type: postgres\n      host: 127.0.0.1\n      # IMPORTANT: Make sure to quote the entire Jinja string here\n      user: &quot;{{ env_var('DBT_USER') }}&quot;\n      password: &quot;{{ env_var('DBT_PASSWORD') }}&quot;\n      ....\n</code></pre>\n<p>Then BEFORE you issue the <code>dbt_run</code> command, you need to set the <code>DBT_USER</code> and <code>DBT_PASSWORD</code> environment variables for your system, user, or shell session. This will depend on your OS, but there are lots of good instructions on this. To set a var for your shell session (for Unix OSes), that could look like this:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>$ export DBT_USER=my_username\n$ export DBT_PASSWORD=abc123\n$ dbt run\n</code></pre>\n<p>Note that storing passwords in environment variables isn't necessarily more secure than keeping them in your <code>profiles.yml</code> file, since they're stored in plaintext and not protected from being dumped into logs, etc. (You shouldn't be checking <code>profiles.yml</code> into source control). You should consider at least using an environment variable name prefixed by <code>DBT_ENV_SECRET_</code> so that dbt keeps them out of logs. See <a href=\"https://docs.getdbt.com/reference/dbt-jinja-functions/env_var#secrets\" rel=\"nofollow noreferrer\">the docs</a> for more info</p>\n"}
