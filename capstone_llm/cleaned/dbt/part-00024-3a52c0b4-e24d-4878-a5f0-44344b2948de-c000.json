{"title":"Materialized View vs Table Using dbt","question_body":"<p>I'm just onboarding dbt and having gone through the tutorial docs I'm wondering if there's a difference between materializing my transformations as views or tables? I'm using Snowflake as the data warehouse. There's some documentation <a href=\"https://docs.snowflake.com/en/user-guide/views-materialized.html#comparison-with-tables-regular-views-and-cached-results\" rel=\"noreferrer\">here</a> that shows the differences between a table and a materialized view but if I'm using dbt to update the tables regularly, do they more or less become the same thing?</p>\n<p>Thanks!</p>\n","answer_body":"<p>dbt doesn't support materialized views, as far as I'm aware, but as Felipe commented, there is an <a href=\"https://github.com/fishtown-analytics/dbt/issues/1162\" rel=\"noreferrer\">open issue to discuss it</a>. If it <em>were</em> possible to use materialized views on Snowflake, you're right that they <em>somewhat</em> become the same thing. The materialized view would update even if you haven't run dbt. As Drew mentions in the ticket though, there are a lot of caveats that make using tables with dbt preferable in most use cases: &quot;no window functions, no unions, limited aggregates, can't query views, etc etc etc&quot;.</p>\n<p>That said, dbt does support views and tables.</p>\n<p>Even when you're using dbt, there's still a difference between a view and a table. A table will always need to be refreshed by dbt in order to be updated. A view will always be as up-to-date as the underlying tables it is referencing.</p>\n<p>For example, let's say you have a dbt model called <code>fct_orders</code> which references a table that is loaded by Fivetran/Stitch called <code>shopify.order</code>. If your model is materialized as a view, it will always return the most up-to-date data in the Shopify table. If it is materialized as a table, and new data has arrived in the Shopify table since you last run dbt, the model will be 'stale'.</p>\n<p>That said, the benefit of materializing it as a table is that it will run more quickly, given it's not having to do the SQL 'transformation' each time.</p>\n<p>The advice I have seen given most often is something like this:</p>\n<ul>\n<li>If using a view isn't too slow for your end-users, use a view.</li>\n<li>If a view gets too slow for your end-users, use a table.</li>\n<li>If building a table with dbt gets too slow, use incremental models in dbt.</li>\n</ul>\n"}
